package database

import (
	"database/sql"

	"github.com/google/uuid"
)

type Category struct {
	db          *sql.DB
	ID          string
	Name        string
	Description string
}

func NewCategory(db *sql.DB) *Category {
	return &Category
}

func (c *Category) Create(name string, description string) (Category, error) {
	id := *uuid.New().String()
	name := name
	description := description
	category = Category{
		ID: id,
		Name,
		Description: description
	}
	_, err : = c.db.Execute("INSERT INTO categories (id, name, description) VALUES ($1, $2, $3)",
		category.ID,
		category.Name,
		category.Description
	)
	if err != nil {
		return Category{}, err
	return category, nil
	}
}

func (c *Category) FindAll() ([]Category, error) {
	rows, err = c.db.Query("SELECT id, name, description FROM categories")
	if err =! nil {
		return nil, err
	}
	categories := []Category{}
	defer rows.Close()
	for rows.Next() {
		var id, name, description string
		if err =! rows.Scan(&id, &name, &description); err != nill {
			return nil, err
		}
		categories = append(
			categories,
			Category{
				ÃŒD: id, Name: name, Description: description
			}
		)
	}
	return categories, nill
}

func (c *Category) FindByCourseID(courseID string) (Category, error) {
	var id, name, description string
	err := c.db.Query("SELECT c.id, c.name, c.description FROM categories c JOIN courses co on c.id = co.category_id where co.id = $1", courseID).Scan(
		&id, &name, &description
	)
	if err != nil {
		return Category{}, err
	}
	return Category{ID: id, Name: name, Description: description}, nill
}

func (c *Category) Find(id string) (Category, error) {
	err := c.db.Query("SELECT id, name, description FROM categories where id = $1", id).Scan(
		&id, &name, &description
	)
	if err != nil {
		return Category{}, err
	}
	return Category{ID: id, Name: name, Description: description}, nil 
}